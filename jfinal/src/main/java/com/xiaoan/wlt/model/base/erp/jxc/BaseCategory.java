package com.xiaoan.wlt.model.base.erp.jxc;

import com.xiaoan.wlt.common.jfinal.BaseModel;
import com.jfinal.plugin.activerecord.IBean;

import org.apache.commons.lang3.StringUtils;

import com.xiaoan.wlt.common.WhereAndParas;

import java.util.ArrayList;

import java.util.List;

/**
 * Generated by JFinal, do not modify this file.
 */
@SuppressWarnings("serial")
public abstract class BaseCategory<M extends BaseCategory<M>> extends BaseModel<M> implements IBean {

	public void setId(java.lang.Integer id) {
		set("id", id);
	}

	public java.lang.Integer getId() {
		return get("id");
	}

	public void setSId(java.lang.Integer sId) {
		set("s_id", sId);
	}

	public java.lang.Integer getSId() {
		return get("s_id");
	}

	public void setParentId(java.lang.Integer parentId) {
		set("parent_id", parentId);
	}

	public java.lang.Integer getParentId() {
		return get("parent_id");
	}

	public void setCategory(java.lang.String category) {
		set("category", category);
	}

	public java.lang.String getCategory() {
		return get("category");
	}

	public void setName(java.lang.String name) {
		set("name", name);
	}

	public java.lang.String getName() {
		return get("name");
	}

	public void setState(java.lang.String state) {
		set("state", state);
	}

	public java.lang.String getState() {
		return get("state");
	}

	public void setCreateTime(java.util.Date createTime) {
		set("create_time", createTime);
	}

	public java.util.Date getCreateTime() {
		return get("create_time");
	}

	public void setUpdateTime(java.util.Date updateTime) {
		set("update_time", updateTime);
	}

	public java.util.Date getUpdateTime() {
		return get("update_time");
	}

	public void setVersion(java.lang.Integer version) {
		set("version", version);
	}

	public java.lang.Integer getVersion() {
		return get("version");
	}

	public static final String TABLE = " erp_jxc_category ";
	public WhereAndParas getWhereAndParas(BaseCategory category){
		StringBuffer sql = new StringBuffer();
		List<Object> list = new ArrayList<Object>();
		WhereAndParas wap = new WhereAndParas();
		if(category.getId() != null && category.getId() > 0){
			sql.append(" and o.id = ?");
			list.add(category.getId());
		}
		if(category.getSId() != null && category.getSId() > 0){
			sql.append(" and o.s_id = ?");
			list.add(category.getSId());
		}
		if(category.getParentId() != null && category.getParentId() > 0){
			sql.append(" and o.parent_id = ?");
			list.add(category.getParentId());
		}
		if(StringUtils.isNotEmpty(category.getCategory())){
			sql.append(" and o.category like ?");
			list.add("%"+category.getCategory()+"%");
		}
		if(StringUtils.isNotEmpty(category.getName())){
			sql.append(" and o.name like ?");
			list.add("%"+category.getName()+"%");
		}
		if(StringUtils.isNotEmpty(category.getState())){
			sql.append(" and o.state like ?");
			list.add("%"+category.getState()+"%");
		}
		if(category.getVersion() != null && category.getVersion() > 0){
			sql.append(" and o.version = ?");
			list.add(category.getVersion());
		}
		wap.setWhere(sql.toString());
		wap.setParas(list.toArray());
		return wap;
	}
}
