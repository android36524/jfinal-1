package com.xiaoan.wlt.model.erp.jxc;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.xiaoan.wlt.common.WhereAndParas;
import com.xiaoan.wlt.model.base.erp.jxc.BaseShopsInfo;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ShopsInfo extends BaseShopsInfo<ShopsInfo> {
	public static final ShopsInfo dao = new ShopsInfo();

	public Page<ShopsInfo> findPageList(ShopsInfo shopsInfo) {
		WhereAndParas wp = getWhereAndParas(shopsInfo);
		return dao.paginate(shopsInfo.getPageNumber(), shopsInfo.getPageSize(), "select * ",
				"from" + ShopsInfo.TABLE + "where 1=1 " + wp.getWhere(), wp.getParas());
	}
	
	public Page<ShopsInfo> findPageList2(ShopsInfo shopsInfo) {
		WhereAndParas wp = getWhereAndParas(shopsInfo);
		String select = "SELECT o.*,u.shopsInfo,u.userCode,u.userName ";
		String where = "FROM erp_jxc_shops_info o LEFT JOIN sys_user u ON o.id = u.shopsInfo where 1=1 " + wp.getWhere();
		return dao.paginate(shopsInfo.getPageNumber(), shopsInfo.getPageSize(),select,where, wp.getParas());
	}

	public Integer sync() throws Exception {
		//先插入没被插入的数据
		Integer index = whileInsetSync(0);
		//更新时间大于本库的都更新
		index = whereUpdateSync(index);

		return index;
	}

	private Integer whereUpdateSync(Integer index) {
		// 先出没同步的数据
		// 查出本数据库中最大 的id
		Record record = Db.findFirst("SELECT MAX(update_time) as updateTime FROM erp_jxc_shops_info ");
		Date d = record.getDate("updateTime");
		List<Record> list = null;
		if (d != null) {
			list = Db.use("o2o").find("select * from t_shops_info where updateTime > ? order by id asc limit 1000 ", d);
		} 

		List<ShopsInfo> infoList = o2oShopsToMyshops(list);
		Db.batchUpdate(infoList, infoList.size());
		index += infoList.size();
		// 没数据的时候返回本次插入的数量
		if (infoList.size() == 0) {
			return index;
		}
		return whereUpdateSync(index);
	}

	private Integer whileInsetSync(int i) {
		// 先出没同步的数据
		// 查出本数据库中最大 的id
		Record record = Db.findFirst("SELECT MAX(id) as maxId FROM erp_jxc_shops_info ");
		Integer maxid = record.getInt("maxId");
		List<Record> list = null;
		if (maxid != null && maxid > 0) {
			list = Db.use("o2o").find("select * from t_shops_info where id > ? order by id asc limit 1000 ", maxid);
		} else {
			list = Db.use("o2o").find("select * from t_shops_info order by id asc limit 1000 ");
		}

		List<ShopsInfo> infoList = o2oShopsToMyshops(list);
		Db.batchSave(infoList, infoList.size());
		i += infoList.size();
		// 没数据的时候返回本次插入的数量
		if (infoList.size() == 0) {
			return i;
		}

		return whileInsetSync(i);
	}

	private List<ShopsInfo> o2oShopsToMyshops(List<Record> list) {
		List<ShopsInfo> infoList = new ArrayList<ShopsInfo>();
		for (Record r : list) {
			ShopsInfo s = new ShopsInfo();
			s.setId(r.getLong("id").intValue());
			s.setAppellation(r.getStr("appellation"));
			s.setArea(r.getStr("area"));
			s.setCity(r.getStr("city"));
			s.setCreateTime(r.getDate("createTime"));
			s.setHouse(r.getStr("house"));
			s.setMobile(r.getStr("mobile"));
			s.setName(r.getStr("name"));
			s.setProvince(r.getStr("province"));
			s.setRemarks(r.getStr("remark"));
			s.setScode(r.getStr("scode"));
			s.setUpdateTime(r.getDate("updateTime"));
			infoList.add(s);
		}
		return infoList;
	}
}
