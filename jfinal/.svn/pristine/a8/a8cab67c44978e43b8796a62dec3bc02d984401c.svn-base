package com.xiaoan.wlt.model.sys;

import org.apache.commons.lang3.StringUtils;

import com.xiaoan.wlt.common.WhereAndParas;

import java.util.ArrayList;

import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.xiaoan.wlt.model.base.sys.BaseUserSalesman;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class UserSalesman extends BaseUserSalesman<UserSalesman> {
	public static final UserSalesman dao = new UserSalesman();
	private int pageNumber = 1;
	private int pageSize = 15;
	public int getPageSize() {return pageSize;}
	public void setPageSize(int pageSize) {this.pageSize = pageSize;}
	public int getPageNumber() {return pageNumber;}
	public void setPageNumber(int pageNumber) {this.pageNumber = pageNumber;}
	public Page<UserSalesman> findPageList(UserSalesman userSalesman) {
		WhereAndParas wp = getWhereAndParas(userSalesman);
		return dao.paginate(userSalesman.getPageNumber(),userSalesman.getPageSize(),"select * ","from"+ UserSalesman.TABLE + "where 1=1 " +wp.getWhere(),wp.getParas());
	}
	public static final String TABLE = " sys_user_salesman ";
	public WhereAndParas getWhereAndParas(UserSalesman userSalesman){
		StringBuffer sql = new StringBuffer();
		List<Object> list = new ArrayList<Object>();
		WhereAndParas wap = new WhereAndParas();
		if(userSalesman.getId() != null && userSalesman.getId() > 0){
			sql.append(" and id = ?");
			list.add(userSalesman.getId());
		}
		if(userSalesman.getVersion() != null && userSalesman.getVersion() > 0){
			sql.append(" and version = ?");
			list.add(userSalesman.getVersion());
		}
		if(userSalesman.getSysUserId() != null && userSalesman.getSysUserId() > 0){
			sql.append(" and sysUserId = ?");
			list.add(userSalesman.getSysUserId());
		}
		if(StringUtils.isNotEmpty(userSalesman.getCode())){
			sql.append(" and code like ?");
			list.add("%"+userSalesman.getCode()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getName())){
			sql.append(" and name like ?");
			list.add("%"+userSalesman.getName()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getPassword())){
			sql.append(" and password like ?");
			list.add("%"+userSalesman.getPassword()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getInStatus())){
			sql.append(" and inStatus like ?");
			list.add("%"+userSalesman.getInStatus()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getSex())){
			sql.append(" and sex like ?");
			list.add("%"+userSalesman.getSex()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getBirthday())){
			sql.append(" and birthday like ?");
			list.add("%"+userSalesman.getBirthday()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getMobile())){
			sql.append(" and mobile like ?");
			list.add("%"+userSalesman.getMobile()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getMarriage())){
			sql.append(" and marriage like ?");
			list.add("%"+userSalesman.getMarriage()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getQq())){
			sql.append(" and qq like ?");
			list.add("%"+userSalesman.getQq()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getHeadimgurl())){
			sql.append(" and headimgurl like ?");
			list.add("%"+userSalesman.getHeadimgurl()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getDelState())){
			sql.append(" and delState like ?");
			list.add("%"+userSalesman.getDelState()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getMarryState())){
			sql.append(" and marryState like ?");
			list.add("%"+userSalesman.getMarryState()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getSexType())){
			sql.append(" and sexType like ?");
			list.add("%"+userSalesman.getSexType()+"%");
		}
		if(StringUtils.isNotEmpty(userSalesman.getDelFlag())){
			sql.append(" and delFlag like ?");
			list.add("%"+userSalesman.getDelFlag()+"%");
		}
		wap.setWhere(sql.toString());
		wap.setParas(list.toArray());
		return wap;
	}
	
	public List<Record> getRankData(String type, String months, String startTime, String endTime, int week) {
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT");
		sb.append(" a.name,a.imageUrl,IFNULL(b.targetValue,0) targetValue,IFNULL(c.targetFin,0) targetFin,");
		if ("NEW_CLIENT".equals(type)) {
			sb.append(" IFNULL(CONCAT(IFNULL(FORMAT(c.targetFin*100/b.targetValue,2),FORMAT(0,2)),'%'),'0.00%') per");
			// 业务员
			sb.append(" FROM (" );
			sb.append(" 	SELECT s.name,s.code,s.id,s.sys_user_id,u.imageUrl");
			sb.append("		FROM sys_user_salesman s");
			sb.append("		LEFT JOIN sys_user u ON u.id = s.sys_user_id");
			sb.append("		WHERE u.state <>'STOP'");
			sb.append("	) a");
			// 新客户目标
			sb.append("	LEFT JOIN (");
			sb.append("		SELECT g.num targetValue, s.id");
			sb.append("		FROM sys_salesman_target g");
			sb.append("		LEFT JOIN sys_user_salesman s ON s.id = g.salesId");
			sb.append("		WHERE g.timeType = 'MONTH' AND g.targetType = 'NEW_CLIENT' ");
			sb.append("			AND g. WEEK = " + week + " AND g.startTime = '" + startTime + "'");
			sb.append(" ) b ON a.id = b.id");
			// 新客户完成
			sb.append("	LEFT JOIN (");
			sb.append(" 	SELECT v.orderScode scode,IFNULL(COUNT(DISTINCT v.shopsId),0) targetFin");
			sb.append(" 	FROM v_order_stat v");
			sb.append(" 	WHERE v.isNew = '0' AND v.prodNum > 0");
			sb.append(" 	AND v.orderTime >= '" + startTime + "'");
			if(StringUtils.isNotBlank(endTime))
				sb.append(" 	AND v.orderTime <= '" + endTime + "'");
			sb.append(" 	GROUP BY v.orderScode");
			sb.append(" ) c ON a.code = c.scode");
			sb.append(" ORDER BY REPLACE(IFNULL(FORMAT(c.targetFin*100/b.targetValue,2),FORMAT(0,2)),',','')*1.0 DESC, c.targetFin DESC");
			/*sb.append("	LEFT JOIN (");
			sb.append(" 	SELECT m.scode,IFNULL(m.cur_new_shops,0) targetFin");
			sb.append(" 	FROM t_stat_sale_tot_month m");
			sb.append(" 	WHERE 1 = 1 AND m.months = '" + months + "'");
			sb.append(" ) c ON a.code = c.scode");*/
		} else if ("DIALING".equals(type)) {
			sb.append(" IFNULL(c.targetFin,0) per");
			// 业务员
			sb.append(" FROM (" );
			sb.append(" 	SELECT s.name,s.code,s.id,s.sys_user_id,u.imageUrl");
			sb.append("		FROM sys_user_salesman s");
			sb.append("		LEFT JOIN sys_user u ON u.id = s.sys_user_id");
			sb.append("		WHERE u.state <>'STOP'");
			sb.append("	) a");
			// 嘟嘟呼叫次数目标
			sb.append(" LEFT JOIN (");
			sb.append(" 	SELECT t.targetValue,t.scode");
			sb.append(" 	FROM t_stat_sale_month_target t");
			sb.append(" 	WHERE t.targetType = 'DIALING' AND t.months = '" + months + "'");
			sb.append(" ) b ON a.code = b.scode");
			// 嘟嘟呼叫完成次数
			sb.append(" LEFT JOIN (");
			sb.append(" 	SELECT yy.userId, COUNT(ds.id) targetFin ");
			sb.append(" 	FROM t_dialing_status ds");
			sb.append(" 	LEFT JOIN sys_user_yonyou yy ON ds.custAcntId = yy.id");
			sb.append(" 	WHERE ds.createTime >= '" + startTime + "'");
			if(StringUtils.isNotBlank(endTime))
				sb.append(" 	AND ds.createTime <= '" + endTime + "'");
			sb.append(" 	GROUP BY yy.userId");
			sb.append(" ) c ON a.sys_user_id = c.userId");
			sb.append(" ORDER BY c.targetFin DESC");
		} else if ("SALES".equals(type)) {
			sb.append(" IFNULL(CONCAT(IFNULL(FORMAT(c.targetFin*100/b.targetValue,2),FORMAT(0,2)),'%'),'0.00%') per");
			// 业务员
			sb.append(" FROM (" );
			sb.append(" 	SELECT s.name,s.code,s.id,s.sys_user_id,u.imageUrl");
			sb.append("		FROM sys_user_salesman s");
			sb.append("		LEFT JOIN sys_user u ON u.id = s.sys_user_id");
			sb.append("		WHERE u.state <>'STOP'");
			sb.append("	) a");
			// 销售月目标
			sb.append(" LEFT JOIN (");
			sb.append("		SELECT g.num targetValue, s.code");
			sb.append("		FROM sys_salesman_target g");
			sb.append("		LEFT JOIN sys_user_salesman s ON s.id = g.salesId");
			sb.append("		WHERE g.timeType = 'MONTH' AND g.targetType = 'SALES' ");
			sb.append("			AND g. WEEK = " + week + " AND g.startTime = '" + startTime + "'");
			sb.append(" ) b ON a.code = b.code");
			// 销售月完成
			sb.append(" LEFT JOIN (");
			sb.append(" 	SELECT v.orderScode,COUNT(v.orderNo),IFNULL(SUM(v.prodNum), 0) targetFin");
			sb.append(" 	FROM v_order_stat v");
			sb.append(" 	LEFT JOIN t_shops_info s ON v.shopsId = s.id");
			sb.append(" 	WHERE (s.isDistributor = 'N' OR s.isDistributor IS NULL)");
			sb.append(" 	AND v.orderTime >= '" + startTime + "'");
			if(StringUtils.isNotBlank(endTime))
				sb.append(" 	AND v.orderTime <= '" + endTime + "'");
			sb.append(" 	GROUP BY v.orderScode");
			sb.append(" ) c ON a.code = c.orderScode");
			sb.append(" ORDER BY REPLACE(IFNULL(FORMAT(c.targetFin*100/b.targetValue,2),FORMAT(0,2)),',','')*1.0 DESC, c.targetFin DESC");
		}
		List<Record> list = Db.use("o2o").find(sb.toString());
		return list;
	}
	
	public List<Record> getNewOrders() {
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT v.shopsName, v.prodNum, v.orderTime");
		sb.append(" FROM v_order_stat v");
		sb.append(" WHERE v.prodNum > 0");
		sb.append(" ORDER BY v.orderTime DESC");
		sb.append(" LIMIT 0, 1");
		List<Record> list = Db.use("o2o").find(sb.toString());
		return list;
	}
	
	public List<Record> getNewClient() {
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT u.userName,a.createTime,a.shopsName");
		sb.append(" FROM v_order_stat a");
		sb.append(" LEFT JOIN t_shops_info s ON s.id = a.shopsId");
		sb.append(" LEFT JOIN sys_user u ON u.userCode = a.orderScode");
		sb.append(" WHERE a.isNew = '0'");
		sb.append(" ORDER BY a.createTime DESC");
		sb.append(" LIMIT 0, 1");
		List<Record> list = Db.use("o2o").find(sb.toString());
		return list;
	}
}
