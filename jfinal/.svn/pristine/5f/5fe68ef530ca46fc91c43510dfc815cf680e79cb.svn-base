package com.xiaoan.wlt.model.erp.jxc;

import org.apache.commons.lang3.StringUtils;

import com.xiaoan.wlt.common.WhereAndParas;

import java.util.ArrayList;

import java.util.List;

import com.jfinal.plugin.activerecord.Page;

import com.xiaoan.wlt.model.base.erp.jxc.BaseOutIntoList;
import com.xiaoan.wlt.shiro.UserContext;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class OutIntoList extends BaseOutIntoList<OutIntoList> {
	public static final OutIntoList dao = new OutIntoList();
	private int pageNumber = 1;
	private int pageSize = 15;

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getPageNumber() {
		return pageNumber;
	}

	public void setPageNumber(int pageNumber) {
		this.pageNumber = pageNumber;
	}

	public Page<OutIntoList> findPageList(OutIntoList outIntoList) {
		WhereAndParas wp = getWhereAndParas(outIntoList);
		return dao.paginate(outIntoList.getPageNumber(), outIntoList.getPageSize(), "select * ",
				"from" + OutIntoList.TABLE + "where 1=1 " + wp.getWhere(), wp.getParas());
	}

	public static final String TABLE = " erp_jxc_out_into_list ";

	public WhereAndParas getWhereAndParas(OutIntoList outIntoList) {
		StringBuffer sql = new StringBuffer();
		List<Object> list = new ArrayList<Object>();
		WhereAndParas wap = new WhereAndParas();
		if (outIntoList.getId() != null && outIntoList.getId() > 0) {
			sql.append(" and id = ?");
			list.add(outIntoList.getId());
		}
		if (outIntoList.getSId() != null && outIntoList.getSId() > 0) {
			sql.append(" and s_id = ?");
			list.add(outIntoList.getSId());
		}
		if (outIntoList.getProductId() != null && outIntoList.getProductId() > 0) {
			sql.append(" and product_id = ?");
			list.add(outIntoList.getProductId());
		}
		if (outIntoList.getIntoListId() != null && outIntoList.getIntoListId() > 0) {
			sql.append(" and into_list_id = ?");
			list.add(outIntoList.getIntoListId());
		}
		if (outIntoList.getIntoPrice() != null && outIntoList.getIntoPrice() > 0) {
			sql.append(" and into_price = ?");
			list.add(outIntoList.getIntoPrice());
		}
		if (outIntoList.getNum() != null && outIntoList.getNum() > 0) {
			sql.append(" and num = ?");
			list.add(outIntoList.getNum());
		}
		if (outIntoList.getDifference() != null && outIntoList.getDifference() > 0) {
			sql.append(" and difference = ?");
			list.add(outIntoList.getDifference());
		}
		if (outIntoList.getOutListId() != null && outIntoList.getOutListId() > 0) {
			sql.append(" and out_list_id = ?");
			list.add(outIntoList.getOutListId());
		}
		if (outIntoList.getOutPrice() != null && outIntoList.getOutPrice() > 0) {
			sql.append(" and out_price = ?");
			list.add(outIntoList.getOutPrice());
		}
		if (StringUtils.isNotEmpty(outIntoList.getRemarks())) {
			sql.append(" and remarks like ?");
			list.add("%" + outIntoList.getRemarks() + "%");
		}
		wap.setWhere(sql.toString());
		wap.setParas(list.toArray());
		return wap;
	}

	/**
	 * 通过出货单写对照表
	 * 
	 * @param out
	 */
	public void addByOut(Out out) {
		// 这里出货的时候需要写一个 对照表。

		// 将入货格取出来
		List<OutList> list = OutList.dao.findByOutId(out.getId());
		// 查出货明细

		for (OutList o : list) {
			// 根据出货单的所有商品数量 写到价格对照表上
			addOutIntos(out, o);
		}

	}


	private void addOutIntos(Out out, OutList o) {
		double outNum = o.getNum();// 子单中的出货量
		// 循环入货子表
		outNum = forIntoList(out, o, outNum);
		// 如果 outNum 还没变0的话，库存里没足够的货
		if (outNum > 0) {
			notIntoList(out, o, outNum);
		}
	}

	private void notIntoList(Out out, OutList o, double outNum) {
		OutIntoList oil = new OutIntoList();
		oil.setSId(out.getSId());
		oil.setProductId(o.getProductId());
		oil.setOutPrice(o.getPriceOut());
		oil.setOutListId(out.getId());
		oil.setNum(outNum);
		Product p = Product.dao.findById(o.getProductId());
		if (p != null)
			oil.setIntoPrice(p.getPriceReference());
		oil.save();
	}

	private static String sql = "select l.* from erp_jxc_into_list l "
								+ " left join erp_jxc_into i on i.id = l.into_id "
								+ " where i.s_id = ? and l.product_id = ? and l.depot_id = ? and l.num_out < l.num order by l.id asc";
	private double forIntoList(Out out, OutList o, double outNum) {
		List<IntoList> ils = IntoList.dao.find(sql, UserContext.getShopsInfo(), o.getProductId(), out.getDepotId());
		for (IntoList il : ils) {
			OutIntoList oil = new OutIntoList();
			oil.setSId(out.getSId());
			oil.setProductId(o.getProductId());
			oil.setOutPrice(o.getPriceOut());
			oil.setOutListId(out.getId());
			double num = il.getNum() - il.getNumOut();// 当前数量
			if (num <= 0) {
				continue;
			}
			// 出货表对应 入货表 的情况， 出货量小于等于 最早进货且没卖完的
			if (outNum <= num) {
				oil.setNum(outNum);
				oil.setIntoListId(il.getId());
				oil.setIntoPrice(il.getPriceInto());
				il.setNumOut(il.getNumOut() + outNum);
				il.setVersion(il.getVersion() + 1);
				il.update();
				oil.save();
				outNum -= outNum;
				break;
			}
			// 出货量大于等于 需要多写一条价格对照
			if (outNum > num) {
				oil.setNum(num);
				oil.setIntoListId(il.getId());
				oil.setIntoPrice(il.getPriceInto());
				il.setNumOut(il.getNumOut() + num);
				il.setVersion(il.getVersion() + 1);
				il.update();
				oil.save();
				outNum -= num;
			}
		}
		return outNum;
	}
}
