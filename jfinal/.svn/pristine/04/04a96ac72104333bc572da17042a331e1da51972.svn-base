package com.xiaoan.wlt.model.erp.jxc;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;

import com.xiaoan.wlt.common.WhereAndParas;

import java.util.ArrayList;

import java.util.List;

import com.jfinal.plugin.activerecord.Page;

import com.xiaoan.wlt.model.base.erp.jxc.BaseInto;
import com.xiaoan.wlt.shiro.UserContext;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Into extends BaseInto<Into> {
	public static final Into dao = new Into();
	private int pageNumber = 1;
	private int pageSize = 15;
	public int getPageSize() {return pageSize;}
	public void setPageSize(int pageSize) {this.pageSize = pageSize;}
	public int getPageNumber() {return pageNumber;}
	public void setPageNumber(int pageNumber) {this.pageNumber = pageNumber;}
	public Page<Into> findPageList(Into into) {
		WhereAndParas wp = getWhereAndParas(into);
		return dao.paginate(into.getPageNumber(),into.getPageSize(),"select * ","from"+ TABLE + "o where 1=1 " +wp.getWhere(),wp.getParas());
	}
	public static final String TABLE = " erp_jxc_into ";
	public WhereAndParas getWhereAndParas(Into into){
		StringBuffer sql = new StringBuffer();
		List<Object> list = new ArrayList<Object>();
		WhereAndParas wap = new WhereAndParas();
		if(into.getId() != null && into.getId() > 0){
			sql.append(" and o.id = ?");
			list.add(into.getId());
		}
		if(into.getSId() != null && into.getSId() > 0){
			sql.append(" and o.s_id = ?");
			list.add(into.getSId());
		}
		if(StringUtils.isNotEmpty(into.getCode())){
			sql.append(" and o.code like ?");
			list.add("%"+into.getCode()+"%");
		}
		if(into.getSupplierId() != null && into.getSupplierId() > 0){
			sql.append(" and o.supplier_id = ?");
			list.add(into.getSupplierId());
		}
		if(StringUtils.isNotEmpty(into.getIntoUser())){
			sql.append(" and o.into_user like ?");
			list.add("%"+into.getIntoUser()+"%");
		}
		if(StringUtils.isNotEmpty(into.getState())){
			sql.append(" and o.state like ?");
			list.add("%"+into.getState()+"%");
		}
		if(into.getPriceTotal() != null && into.getPriceTotal() > 0){
			sql.append(" and o.price_total = ?");
			list.add(into.getPriceTotal());
		}
		if(StringUtils.isNotEmpty(into.getRemarks())){
			sql.append(" and o.remarks like ?");
			list.add("%"+into.getRemarks()+"%");
		}
		if(into.getVersion() != null && into.getVersion() > 0){
			sql.append(" and o.version = ?");
			list.add(into.getVersion());
		}
		if(into.getStartTime() != null){
			sql.append(" and o.into_time >= ?");
			list.add(into.getStartTime());
		}
		if(into.getEndTime() != null){
			sql.append(" and o.into_time <= ?");
			list.add(into.getEndTime());
		}
		wap.setWhere(sql.toString());
		wap.setParas(list.toArray());
		return wap;
	}
	
	public Page<Into> findPageList2(Into into) {
		WhereAndParas wp = getWhereAndParas(into);
		String select = "SELECT o.*,s.`name` as supplierName ";
		String from = "FROM erp_jxc_into o LEFT JOIN erp_jxc_supplier s ON s.id = o.supplier_id "
				+ "where 1=1 " +wp.getWhere() + " "
				+ "order by o.into_time desc ";
		return dao.paginate(into.getPageNumber(),into.getPageSize(),select,from,wp.getParas());
	}
	
	/**
	 * 作废一个入货单，并修改库存
	 * @param id
	 */
	public void cancelById(String id){
		if(!NumberUtils.isNumber(id)) throw new RuntimeException("无效id");
		Into into = dao.findById(id);
		if(into.getState().equals("PUT"))
			Stock.dao.cancelByInto(into);
		//更新货单的状态
		into.setState("INTOCANCEL");
		into.update();
	}
	public Into findInfoById(String id) {
		String sql = "SELECT o.*,d.name as dname,s.name as sname "
				+ "FROM erp_jxc_into o "
				+ "LEFT JOIN erp_jxc_depot d ON o.depot_id = d.id "
				+ "LEFT JOIN erp_jxc_supplier s ON o.supplier_id = s.id "
				+ "WHERE o.id = ? ";
		return dao.findFirst(sql,id);
	}
	
	/**
	 * <th>日期</th>
		<th>进货笔数</th>
		<th>进货额(元)</th>
		<th>操作</th
		入货日期分组数据
	 * @return
	 */
	private static String findByIntoTimeGroup = "SELECT o.into_time as time,COUNT(o.id) as num,"
												+ "SUM(o.price_total) as price "
												+ "FROM erp_jxc_into o where o.s_id = ? AND o.state = 'PUT' "
												+ "GROUP BY date_format(o.into_time, '%Y%m%d') "
												+ "ORDER BY o.into_time DESC "
												+ "LIMIT 15 ";
	public List<Into> findByIntoTimeGroup() {
		return dao.find(findByIntoTimeGroup,UserContext.getShopsInfo() == null ? 0:UserContext.getShopsInfo());
	}
	
	/**
	 * 查出历史进货数量，和金额
	 */
	private static String findTotalNumPrice = "SELECT COUNT(o.id) AS num,SUM(o.price_total) AS price FROM erp_jxc_into o WHERE o.state = 'PUT' AND o.s_id = ?";
	public Into findTotalNumPrice() {
		return dao.findFirst(findTotalNumPrice,UserContext.getShopsInfo() == null ? 0:UserContext.getShopsInfo());
	}
	/**
	 * 查出进货最多的商品
	 * @return
	 */
	private static String findMostProduct = "SELECT p.name AS pName FROM erp_jxc_into o "
			+ "LEFT JOIN erp_jxc_into_list l ON o.id = l.into_id "
			+ "LEFT JOIN erp_jxc_product p ON l.product_id = p.id "
			+ "WHERE o.state = 'PUT' AND o.s_id = ? "
			+ "GROUP BY l.product_id "
			+ "ORDER BY SUM(l.num) DESC";
	public Into findMostProduct() {
		return dao.findFirst(findMostProduct,UserContext.getShopsInfo() == null ? 0:UserContext.getShopsInfo());
	}
	/**
	 * 进货额最高的供货商
	 * @return
	 */
	private static String findTotalSupplierPrice = "SELECT SUM(l.price_total) AS total,s.name AS sName FROM erp_jxc_into o "
			+ "LEFT JOIN erp_jxc_into_list l ON o.id = l.into_id "
			+ "LEFT JOIN erp_jxc_supplier s ON o.supplier_id = s.id "
			+ "WHERE o.state = 'PUT' AND o.s_id = ? "
			+ "GROUP BY o.supplier_id "
			+ "ORDER BY SUM(l.price_total) DESC"; 
	public Into findTotalSupplierPrice() {
		return dao.findFirst(findTotalSupplierPrice,UserContext.getShopsInfo() == null ? 0:UserContext.getShopsInfo());
	}
	/**
	 * 进货单价最高的商品
	 */
	private static String findMaxPriceProduct = "SELECT p.name as pName,l.price_total FROM erp_jxc_into o "
			+ "LEFT JOIN erp_jxc_into_list l ON o.id = l.into_id "
			+ "LEFT JOIN erp_jxc_product p ON l.product_id = p.id "
			+ "WHERE o.state = 'PUT' AND o.s_id = ? "
			+ "ORDER BY l.price_total DESC ";
	public Into findMaxPriceProduct() {
		return dao.findFirst(findMaxPriceProduct,UserContext.getShopsInfo() == null ? 0:UserContext.getShopsInfo());
	}
	
	
}